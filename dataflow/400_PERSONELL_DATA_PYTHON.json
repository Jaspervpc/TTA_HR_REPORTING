{
	"name": "400_PERSONELL_DATA_PYTHON",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "200_STG_SEM",
						"type": "DatasetReference"
					},
					"name": "PersonioBasis"
				},
				{
					"dataset": {
						"referenceName": "D_PERIOD",
						"type": "DatasetReference"
					},
					"name": "PERIODE"
				},
				{
					"dataset": {
						"referenceName": "400_TRANSLATION",
						"type": "DatasetReference"
					},
					"name": "Uebersetzung"
				},
				{
					"dataset": {
						"referenceName": "400_TRANSLATION",
						"type": "DatasetReference"
					},
					"name": "Uebersetzung2"
				},
				{
					"dataset": {
						"referenceName": "200_CompanyTranslation",
						"type": "DatasetReference"
					},
					"name": "Companytranslations"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "400_DWH_FAP",
						"type": "DatasetReference"
					},
					"name": "PersonellData"
				}
			],
			"transformations": [
				{
					"name": "BerechnungenVorab"
				},
				{
					"name": "Aggregation"
				},
				{
					"name": "BerechnungenNachAggregat"
				},
				{
					"name": "BerechnungenVorabTeil2"
				},
				{
					"name": "SuchePeriode"
				},
				{
					"name": "BerechnungenNachAggregationTeil2"
				},
				{
					"name": "AktiveMA"
				},
				{
					"name": "GroupChange"
				},
				{
					"name": "LookUebersetzung"
				},
				{
					"name": "lookGender"
				},
				{
					"name": "lookAnstArt"
				},
				{
					"name": "lookExitType"
				},
				{
					"name": "filter0"
				},
				{
					"name": "SucheGesKurz"
				}
			],
			"scriptLines": [
				"source(output(",
				"          SEM_ID as string,",
				"          SEM_SID as string,",
				"          SEM_VALID_FROM as date,",
				"          SEM_VALID_TO as date,",
				"          SEM_COST_CENTRE as string,",
				"          SEM_COST_CENTER_NAME as string,",
				"          SEM_COST_CENTER_WEIGHT as integer,",
				"          SEM_DEPARTMENT as string,",
				"          SEM_FIRST_ENTRY_DATE as date,",
				"          SEM_ENTRY_DATE_CURRENT_EMPLOYMENT_PERIOD as date,",
				"          SEM_LEAVING_DATE_CURRENT_EMPLOYMENT_PERIOD as date,",
				"          SEM_HIRED_AS as string,",
				"          SEM_EMPLOYEE_GROUPS_BY_FUNCTION as string,",
				"          SEM_MAILADDRESS as string,",
				"          SEM_FTE as string,",
				"          SEM_GENDER as string,",
				"          SEM_POSITION as string,",
				"          SEM_COMPANY as string,",
				"          SEM_EXIT_TYPE as string,",
				"          SEM_WEEKLY_HOURS as string,",
				"          SEM_UPLOAD_DATE as timestamp,",
				"          SEM_FIRSTNAME as string,",
				"          SEM_LASTNAME as string,",
				"          SEM_PLACE_OF_BUSINESS as string,",
				"          SEM_DEGREE_OF_SEVERE_DISABILITY as string,",
				"          SEM_DATE_OF_BIRTH as string,",
				"          SEM_BAD_CHURN as string,",
				"          SEM_LOAD_PERIOD as string,",
				"          SEM_AGE as integer,",
				"          SEM_TENURE as integer,",
				"          SEM_START_ACCIDENT_DATE as string,",
				"          SEM_COMPANY_KEY as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> PersonioBasis",
				"source(output(",
				"          DP_PERIOD_ID as integer,",
				"          DP_PERIOD as string,",
				"          DP_START_DATE as date,",
				"          DP_END_DATE as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> PERIODE",
				"source(output(",
				"          DATAAREA as string,",
				"          SRC_VALUE as string,",
				"          TRANSLATION as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> Uebersetzung",
				"source(output(",
				"          DATAAREA as string,",
				"          SRC_VALUE as string,",
				"          TRANSLATION as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> Uebersetzung2",
				"source(output(",
				"          COMPANY as string,",
				"          COMPANY_KEY as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> Companytranslations",
				"lookExitType derive(LengthOfEmploymentRounded = iif(isNull(SEM_TENURE), toInteger(0), toInteger(round(SEM_TENURE, 0))),",
				"          Jahr = substring(SEM_LOAD_PERIOD, 1, 4),",
				"          Monat = substring(SEM_LOAD_PERIOD, 5, 2),",
				"          HCNewHires = iif(    SEM_ENTRY_DATE_CURRENT_EMPLOYMENT_PERIOD >= DP_START_DATE     && SEM_ENTRY_DATE_CURRENT_EMPLOYMENT_PERIOD <= DP_END_DATE     && GroupChange == false()     &&         (                isNull(SEM_EXIT_TYPE)             ||                 SEM_EXIT_TYPE != \"Verschmelzung\"            ||                ( SEM_EXIT_TYPE == \"Verschmelzung\" && toString(SEM_LEAVING_DATE_CURRENT_EMPLOYMENT_PERIOD, \"YYYYMM\") == toString(SEM_ENTRY_DATE_CURRENT_EMPLOYMENT_PERIOD, \"YYYYMM\") )        )    ,         toDecimal('1')    ,         toDecimal('0') ),",
				"          HCNewHiresGroupChange = iif(SEM_ENTRY_DATE_CURRENT_EMPLOYMENT_PERIOD >= DP_START_DATE && SEM_ENTRY_DATE_CURRENT_EMPLOYMENT_PERIOD <= DP_END_DATE && ( SEM_EXIT_TYPE != 'Verschmelzung' || isNull(SEM_EXIT_TYPE)) , toDecimal('1'), toDecimal('0') ),",
				"          HCLeavers = iif( SEM_LEAVING_DATE_CURRENT_EMPLOYMENT_PERIOD >= DP_START_DATE &&  SEM_LEAVING_DATE_CURRENT_EMPLOYMENT_PERIOD <= DP_END_DATE  && GroupChange == false() && (isNull(SEM_EXIT_TYPE) || SEM_EXIT_TYPE != \"Verschmelzung\"), toDecimal('1'), toDecimal('0')),",
				"          HCLeaversGroupChange = iif( SEM_LEAVING_DATE_CURRENT_EMPLOYMENT_PERIOD >= DP_START_DATE &&  SEM_LEAVING_DATE_CURRENT_EMPLOYMENT_PERIOD <= DP_END_DATE && ( SEM_EXIT_TYPE != 'Verschmelzung' || isNull(SEM_EXIT_TYPE) ) , toDecimal('1'), toDecimal('0')),",
				"          Geschlecht = iif(SEM_GENDER  == \"\" || isNull(SEM_GENDER), \"N/A\", \r",
				"     iif(isNull(Uebersetzung@TRANSLATION), SEM_GENDER, Uebersetzung@TRANSLATION)\r",
				"),",
				"          ExitType = iif(isNull(SEM_EXIT_TYPE)||SEM_EXIT_TYPE == \"\" || SEM_EXIT_TYPE == \"0\", \"\", iif( isNull(Uebersetzung2@TRANSLATION), SEM_EXIT_TYPE, Uebersetzung2@TRANSLATION )),",
				"          numeric_fte = toDecimal(SEM_FTE)) ~> BerechnungenVorab",
				"BerechnungenVorabTeil2 aggregate(groupBy(DEPARTMENT = SEM_DEPARTMENT,",
				"          AGE = SEM_AGE,",
				"          HiredAs,",
				"          PLACE_OF_BUSINESS = SEM_PLACE_OF_BUSINESS,",
				"          LengthOfEmploymentRounded,",
				"          Geschlecht,",
				"          COMPANY_KEY,",
				"          DEGREE_OF_SEVERE_DISABILITY = SEM_DEGREE_OF_SEVERE_DISABILITY,",
				"          COST_CENTRE = SEM_COST_CENTRE,",
				"          LOAD_PERIOD = SEM_LOAD_PERIOD,",
				"          DP_PERIOD_ID,",
				"          Jahr,",
				"          Monat,",
				"          EmployeeGroupFunction,",
				"          ExitType,",
				"          GroupChange,",
				"          ID = SEM_ID,",
				"          SID = SEM_SID),",
				"     StartCountEmployees = sum(AktiveMA),",
				"          EndCountEmployeesInclGroupChange = sum(AktiveMAInclGroupChange),",
				"          EndCountFTEInclGroupChange = sum(FTEEmployeesEndInclGroupChange),",
				"          HCNewHires = sum(HCNewHires),",
				"          HCNewHiresGroupChange = sum(HCNewHiresGroupChange),",
				"          HCLeavers = sum(HCLeavers),",
				"          HCLeaversGroupChange = sum(HCLeaversGroupChange),",
				"          FTEEmployeesStart = sum(FTEEmployeesEnd),",
				"          FTENewHires = sum(FTENewHires),",
				"          FTENewHiresGroupChange = sum(FTENewHiresGroupChange),",
				"          FTELeavers = sum(FTELeavers),",
				"          FTELeaversGroupChange = sum(FTELeaversGroupChange),",
				"          HCChurn = sum(HCChurn),",
				"          BadChurn = sum(BadChurn),",
				"          AccidentAtWork = sum(AccidentAtWork),",
				"          WorkRelDeath = sum(WorkRelatedFatalities),",
				"          DisabledHC = sum(DisabledHC),",
				"          DisabledFTE = sum(DisabledFTE)) ~> Aggregation",
				"Aggregation derive(Operative = iif( \r",
				"    locate('EXPERTS', upper(EmployeeGroupFunction), 1) > 0 \r",
				"    || locate('CONSULTANTS', upper(EmployeeGroupFunction), 1) > 0 \r",
				"    || locate('PROFESSIONALS', upper(EmployeeGroupFunction), 1) > 0, \r",
				"    'Operative', \r",
				"    'Non Operative'\r",
				"),",
				"          KST = toString(null()),",
				"          Position = toString(null()),",
				"          HCEmployeesEnd = StartCountEmployees -  HCLeavers + HCNewHires,",
				"          HCEmployeesStartInclGroupChange = EndCountEmployeesInclGroupChange +  HCLeaversGroupChange - HCNewHiresGroupChange) ~> BerechnungenNachAggregat",
				"BerechnungenVorab derive(FTEEmployeesEnd = AktiveMA * numeric_fte,",
				"          FTEEmployeesEndInclGroupChange = AktiveMAInclGroupChange * numeric_fte,",
				"          FTENewHires = HCNewHires * numeric_fte,",
				"          FTENewHiresGroupChange = HCNewHiresGroupChange * numeric_fte,",
				"          FTELeavers = HCLeavers * numeric_fte,",
				"          FTELeaversGroupChange = HCLeaversGroupChange * numeric_fte,",
				"          HCChurn = HCLeavers,",
				"          BadChurn = case(isNull(SEM_BAD_CHURN) , toDecimal(0, 18, 4), \r",
				"     SEM_BAD_CHURN == \"Nein\", toDecimal(0, 18, 4), \r",
				"     SEM_BAD_CHURN == \"No\", toDecimal(0, 18, 4), \r",
				"      SEM_BAD_CHURN == \"0\", toDecimal(0, 18, 4), \r",
				"      SEM_BAD_CHURN == \"Ja\" && HCLeavers == 1, toDecimal(1, 18, 4),\r",
				"      SEM_BAD_CHURN == \"Yes\" && HCLeavers == 1, toDecimal(1, 18, 4),\r",
				"      SEM_BAD_CHURN == \"1\" && HCLeavers == 1, toDecimal(1, 18, 4)),",
				"          EmployeeGroupFunction = replace(SEM_EMPLOYEE_GROUPS_BY_FUNCTION, \"A¼\", \"ü\"),",
				"          HiredAs = replace(replace(SEM_HIRED_AS, \"A¼\", \"ü\"), \"A¤\", \"ä\"),",
				"          DisabledHC = iif(SEM_DEGREE_OF_SEVERE_DISABILITY == \"Ja\" || SEM_DEGREE_OF_SEVERE_DISABILITY == \"mind. 50%\", AktiveMAInclGroupChange, toDecimal(0, 1, 0)),",
				"          DisabledFTE = iif(SEM_DEGREE_OF_SEVERE_DISABILITY == \"Ja\" || SEM_DEGREE_OF_SEVERE_DISABILITY == \"mind. 50%\", AktiveMAInclGroupChange * numeric_fte, toDecimal(0, 1, 0)),",
				"          AccidentAtWork = /* iif(start_accident_date <> null(), AktiveMAInclGroupChange, toDecimal(0, 1, 0)) */\r",
				"0,",
				"          WorkRelatedFatalities = /* iif(WORKRELATED_DEATH == \"Ja\", AktiveMAInclGroupChange, toDecimal(0, 1, 0)) */\r",
				"0) ~> BerechnungenVorabTeil2",
				"filter0, PERIODE lookup(SEM_LOAD_PERIOD == DP_PERIOD,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> SuchePeriode",
				"lookAnstArt derive(FTEEmployeesEnd = FTEEmployeesStart - FTELeavers + FTENewHires,",
				"          FTEEmployeesStartInclGroupChange = EndCountFTEInclGroupChange + FTELeaversGroupChange - FTENewHiresGroupChange,",
				"          FPR_PERMANENT_EMPLOYEES_FLAG = case(\r",
				"    left(HiredAs, 14) == \"Festangestellt\", true(), \r",
				"    left(HiredAs, 10) == \"Angestellt\", true(), \r",
				"    left(HiredAs, 13) == \"IT-Consultant\", true(),\r",
				"    left(HiredAs, 9) == \"IT-Expert\", true(),\r",
				"    left(HiredAs, 9) == \"Permanent\", true(),\r",
				"    false()\r",
				"),",
				"          PeriodDate = toDate(concat(LOAD_PERIOD, toString( lastDayOfMonth( toDate(concat(LOAD_PERIOD, \"01\"), \"yyyy-MM-dd\" )), \"dd\")), \"yyyy-MM-dd\"),",
				"          HiredAsText = iif( isNull(HiredAs) || HiredAs == \"\", \"no Hired As Information\", iif(isNull(Uebersetzung2@TRANSLATION), HiredAs, Uebersetzung2@TRANSLATION)),",
				"          EmployeeGroupFunctionText = iif( isNull(EmployeeGroupFunction) || EmployeeGroupFunction == \"\", \"no Function Information\", \r",
				"    iif( isNull(Uebersetzung@TRANSLATION),  EmployeeGroupFunction, Uebersetzung@TRANSLATION)\r",
				"    )) ~> BerechnungenNachAggregationTeil2",
				"GroupChange derive(AktiveMA = iif( ( isNull(SEM_LEAVING_DATE_CURRENT_EMPLOYMENT_PERIOD) || SEM_LEAVING_DATE_CURRENT_EMPLOYMENT_PERIOD >= DP_START_DATE || ( SEM_LEAVING_DATE_CURRENT_EMPLOYMENT_PERIOD >= DP_START_DATE && SEM_LEAVING_DATE_CURRENT_EMPLOYMENT_PERIOD <= DP_END_DATE && GroupChange == true() ) ) && \r",
				"         ( \r",
				"               ( isNull(SEM_ENTRY_DATE_CURRENT_EMPLOYMENT_PERIOD) || SEM_ENTRY_DATE_CURRENT_EMPLOYMENT_PERIOD < DP_START_DATE ) \r",
				"               || \r",
				"               ( \r",
				"\r",
				"                    ( \r",
				"                         ( \r",
				"                              SEM_EXIT_TYPE == \"Verschmelzung\" \r",
				"                              && \r",
				"                                   (\r",
				"                                        left(toString(SEM_LEAVING_DATE_CURRENT_EMPLOYMENT_PERIOD), 7) != left(toString(SEM_ENTRY_DATE_CURRENT_EMPLOYMENT_PERIOD), 7) \r",
				"                                        ||\r",
				"                                        isNull(SEM_LEAVING_DATE_CURRENT_EMPLOYMENT_PERIOD)\r",
				"                                   )\r",
				"                              \r",
				"                         ) \r",
				"                         || \r",
				"                         (GroupChange == true() && !(SEM_ENTRY_DATE_CURRENT_EMPLOYMENT_PERIOD < DP_END_DATE && SEM_ENTRY_DATE_CURRENT_EMPLOYMENT_PERIOD > DP_START_DATE ))\r",
				"                    )  \r",
				"               )  \r",
				"          ) , \r",
				"            toDecimal(1) , \r",
				"            toDecimal(0)\r",
				"   ),",
				"          AktiveMAInclGroupChange = iif( \r",
				"    ( ( isNull(SEM_LEAVING_DATE_CURRENT_EMPLOYMENT_PERIOD) || SEM_LEAVING_DATE_CURRENT_EMPLOYMENT_PERIOD > DP_END_DATE ) || ( SEM_LEAVING_DATE_CURRENT_EMPLOYMENT_PERIOD == DP_END_DATE && SEM_EXIT_TYPE == 'Verschmelzung')  ) \r",
				"    && ( isNull(SEM_ENTRY_DATE_CURRENT_EMPLOYMENT_PERIOD) || SEM_ENTRY_DATE_CURRENT_EMPLOYMENT_PERIOD <= DP_END_DATE ) , \r",
				"        toDecimal(1) , \r",
				"        toDecimal(0)\r",
				")) ~> AktiveMA",
				"SucheGesKurz derive(GroupChange = case(   SEM_EXIT_TYPE == \"Gesellschaftswechsel\", true(), \r",
				"        SEM_EXIT_TYPE == \"GROUP-Wechsel\", true(), \r",
				"        SEM_EXIT_TYPE == \"GROUP-Wechsel Abgang\", true(), \r",
				"        SEM_EXIT_TYPE == \"GROUP-Wechsel Zugang\", true(), \r",
				"        SEM_EXIT_TYPE == \"subcompany-switch\", true(),\r",
				"    false())) ~> GroupChange",
				"BerechnungenNachAggregat, Uebersetzung lookup(EmployeeGroupFunction == SRC_VALUE,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LookUebersetzung",
				"AktiveMA, Uebersetzung lookup(SEM_GENDER == SRC_VALUE,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookGender",
				"LookUebersetzung, Uebersetzung2 lookup(HiredAs == Uebersetzung2@SRC_VALUE,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookAnstArt",
				"lookGender, Uebersetzung2 lookup(SEM_EXIT_TYPE == Uebersetzung2@SRC_VALUE,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookExitType",
				"PersonioBasis filter(SEM_COMPANY != '0') ~> filter0",
				"SuchePeriode, Companytranslations lookup(SEM_COMPANY == COMPANY,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> SucheGesKurz",
				"BerechnungenNachAggregationTeil2 sink(allowSchemaDrift: true,",
				"     validateSchema: true,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     recreate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          FPR_PERIOD = LOAD_PERIOD,",
				"          FPR_PERIOD_ID = DP_PERIOD_ID,",
				"          FPR_COSTCENTRE = KST,",
				"          FPR_POSITION = Position,",
				"          FPR_YEAR = Jahr,",
				"          FPR_MONTH = Monat,",
				"          FPR_GENDER = Geschlecht,",
				"          FPR_COMPANY = COMPANY_KEY,",
				"          FPR_PLANT = PLACE_OF_BUSINESS,",
				"          FPR_BU = DEPARTMENT,",
				"          FPR_PERMANENT_EMPLOYEE = HiredAsText,",
				"          FPR_DISABILITY = DEGREE_OF_SEVERE_DISABILITY,",
				"          FPR_FUNCTION = EmployeeGroupFunctionText,",
				"          FPR_OPERATIVE = Operative,",
				"          FPR_AGE = AGE,",
				"          FPR_TENURE = LengthOfEmploymentRounded,",
				"          FPR_HC_EMPLOYEES_START_PERIOD = StartCountEmployees,",
				"          FPR_HC_EMPLOYEES_END_PERIOD = HCEmployeesEnd,",
				"          FPR_HC_EMPLOYEES_END_PERIOD_INCL_GROUPCHANGE = EndCountEmployeesInclGroupChange,",
				"          FPR_FTE_EMPLOYEES_END_PERIOD_INCL_GROUPCHANGE = EndCountFTEInclGroupChange,",
				"          FPR_HC_NEW_HIRES = HCNewHires,",
				"          FPR_HC_LEAVERS = HCLeavers,",
				"          FPR_FTE_EMPLOYEES_START_PERIOD = FTEEmployeesStart,",
				"          FPR_FTE_EMPLOYEES_END_PERIOD = FTEEmployeesEnd,",
				"          FPR_FTE_NEW_HIRES = FTENewHires,",
				"          FPR_FTE_LEAVERS = FTELeavers,",
				"          FPR_HC_CHURN = HCChurn,",
				"          FPR_BAD_CHURN = BadChurn,",
				"          FPR_PERMANENT_EMPLOYEES_FLAG,",
				"          FPR_WORK_REL_INURIES = AccidentAtWork,",
				"          FPR_WORK_REL_FATALITIES = WorkRelDeath,",
				"          FPR_DISABLED_EMPLOYEES_HC = DisabledHC,",
				"          FPR_DISABLED_EMPLOYEES_FTE = DisabledFTE,",
				"          FPR_PERIOD_DATE = PeriodDate,",
				"          FPR_EXIT_TYPE = ExitType,",
				"          FPR_HC_EMPLOYEES_START_PERIOD_INCL_GROUPCHANGE = HCEmployeesStartInclGroupChange,",
				"          FPR_FTE_EMPLOYEES_START_PERIOD_INCL_GROUPCHANGE = FTEEmployeesStartInclGroupChange,",
				"          FPR_HC_NEW_HIRES_GROUPCHANGE = HCNewHiresGroupChange,",
				"          FPR_HC_LEAVERS_GROUPCHANGE = HCLeaversGroupChange,",
				"          FPR_FTE_NEW_HIRES_GROUPCHANGE = FTENewHiresGroupChange,",
				"          FPR_FTE_LEAVERS_GROUPCHANGE = FTELeaversGroupChange,",
				"          SID,",
				"          ID",
				"     )) ~> PersonellData"
			]
		}
	}
}