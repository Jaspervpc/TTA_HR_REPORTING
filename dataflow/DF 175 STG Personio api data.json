{
	"name": "DF 175 STG Personio api data",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "150_STG_SPA",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "175_STG_SPAE",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "sort1"
				},
				{
					"name": "window1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "window2"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "select1"
				},
				{
					"name": "filter1"
				},
				{
					"name": "filter2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          employee_id as integer,",
				"          effective_date as date,",
				"          cost_center_id as integer,",
				"          cost_center_name as string,",
				"          cost_center_weight as integer,",
				"          sqlhash as string,",
				"          department_id as string,",
				"          first_entry_date as string,",
				"          entry_date as string,",
				"          exit_date as string,",
				"          permanent_employee as string,",
				"          dynamic_7173473 as string,",
				"          email as string,",
				"          fte as string,",
				"          gender as string,",
				"          position as string,",
				"          subcompany_id as string,",
				"          termination_type as string,",
				"          weekly_working_hours as string,",
				"          upload_date as timestamp,",
				"          place_of_business as string,",
				"          DEGREE_OF_SEVERE_DISABILITY as string,",
				"          age as string,",
				"          bad_churn as string,",
				"          status as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source1",
				"source1 sort(asc(employee_id, true),",
				"     asc(effective_date, true)) ~> sort1",
				"sort1 window(over(employee_id),",
				"     asc(effective_date, true),",
				"     Valid_to = lead(effective_date, 1, null())) ~> window1",
				"window1 derive(Valid_to = addDays(Valid_to, -1)) ~> derivedColumn1",
				"derivedColumn1 window(over(employee_id),",
				"     asc(effective_date, true),",
				"     Rank = denseRank()) ~> window2",
				"window2 derive(IsCurrent = iif(Rank == 1, \"TRUE\", \"FALSE\"),",
				"          FIRSTNAME = initCap((split(split(email, '@')[1], '.')[1])),",
				"          LASTNAME = initCap((split(split(email, '@')[1], '.')[2])),",
				"          Date_entry_date = toDate(entry_date, \"yyyy-MM-dd\"),",
				"          Date_exit_date = toDate(exit_date, \"yyyy-MM-dd\"),",
				"          Date_first_entry_date = toDate(first_entry_date, \"yyyy-MM-dd\")) ~> derivedColumn2",
				"derivedColumn2 select(mapColumn(",
				"          sqlhash,",
				"          employee_id,",
				"          effective_date,",
				"          Valid_to,",
				"          cost_center_id,",
				"          cost_center_name,",
				"          cost_center_weight,",
				"          cost_centers = cost_center_name,",
				"          department_id,",
				"          first_entry_date = Date_first_entry_date,",
				"          entry_date = Date_entry_date,",
				"          exit_date = Date_exit_date,",
				"          permanent_employee,",
				"          dynamic_7173473,",
				"          email,",
				"          fte,",
				"          gender,",
				"          position,",
				"          subcompany_id,",
				"          termination_type,",
				"          weekly_working_hours,",
				"          upload_date,",
				"          FIRSTNAME,",
				"          LASTNAME,",
				"          place_of_business,",
				"          DEGREE_OF_SEVERE_DISABILITY,",
				"          age,",
				"          bad_churn,",
				"          status",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 filter(and(\r",
				"    permanent_employee != \"gewerbliche Aushilfe\",\r",
				"    and(\r",
				"        permanent_employee != \"Leiharbeitnehmer:in\",\r",
				"        permanent_employee != \"Employer of Record (EOR)\"\r",
				"    )\r",
				")) ~> filter1",
				"filter1 filter(!(permanent_employee == 'Testaccount'",
				"  || LASTNAME == 'Mustermann'",
				"  || LASTNAME == 'Mustermann-test')) ~> filter2",
				"filter2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     recreate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          SID = sqlhash,",
				"          ID = employee_id,",
				"          VALID_FROM = effective_date,",
				"          VALID_TO = Valid_to,",
				"          COST_CENTRE = cost_center_id,",
				"          cost_center_name,",
				"          cost_center_weight,",
				"          cost_centers = cost_center_name,",
				"          DEPARTMENT = department_id,",
				"          FIRST_ENTRY_DATE = first_entry_date,",
				"          ENTRY_DATE_CURRENT_EMPLOYMENT_PERIOD = entry_date,",
				"          LEAVING_DATE_CURRENT_EMPLOYMENT_PERIOD = exit_date,",
				"          HIRED_AS = permanent_employee,",
				"          EMPLOYEE_GROUPS_BY_FUNCTION = dynamic_7173473,",
				"          MAILADDRESS = email,",
				"          FTE = fte,",
				"          GENDER = gender,",
				"          POSITION = position,",
				"          COMPANY = subcompany_id,",
				"          EXIT_TYPE = termination_type,",
				"          WEEKLY_HOURS = weekly_working_hours,",
				"          upload_date,",
				"          FIRSTNAME,",
				"          LASTNAME,",
				"          PLACE_OF_BUSINESS = place_of_business,",
				"          DEGREE_OF_SEVERE_DISABILITY,",
				"          DATE_OF_BIRTH = age,",
				"          BAD_CHURN = bad_churn,",
				"          status",
				"     )) ~> sink1"
			]
		}
	}
}